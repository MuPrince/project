package com.prince.util.algorithmImpl.search.tree;

/**
 * @description: 平衡查找树
 *              平衡查找树定义：和二叉树不一样，2-3树运行每个节点保存1个或者两个的值。
 *              对于普通的2节点(2-node)，他保存1个key和左右两个自己点。对应3节点(3-node)，保存两个Key，2-3查找树的定义如下：
 * 　　               1）要么为空，要么：
 * 　　               2）对于2节点，该节点保存一个key及对应value，以及两个指向左右节点的节点，左节点也是一个2-3节点，所有的值都比key要小，右节点也是一个2-3节点，所有的值比key要大。
 * 　　               3）对于3节点，该节点保存两个key及对应value，以及三个指向左中右的节点。左节点也是一个2-3节点，所有的值均比两个key中的最小的key还要小；
 *                      中间节点也是一个2-3节点，中间节点的key值在两个跟节点key值之间；右节点也是一个2-3节点，节点的所有key值比两个key中的最大的key还要大。
 *              平衡查找树的性质：
 * 　　               1）如果中序遍历2-3查找树，就可以得到排好序的序列；
 * 　　               2）在一个完全平衡的2-3查找树中，根节点到每一个为空节点的距离都相同。
 *                      （这也是平衡树中“平衡”一词的概念，根节点到叶节点的最长距离对应于查找算法的最坏情况，而平衡树中根节点到叶节点的距离都一样，最坏情况也具有对数复杂度。）
 *              复杂度分析：
 * 　　               平衡查找树的查找效率与树的高度是息息相关的。
 *                   在最坏的情况下，也就是所有的节点都是2-node节点，查找效率为lgN
 *                   在最好的情况下，所有的节点都是3-node节点，查找效率为log3N约等于0.631lgN
 *
 * @author Prince
 * @time 2020/9/25 14:11
 */
public class BalancedTree {
}
